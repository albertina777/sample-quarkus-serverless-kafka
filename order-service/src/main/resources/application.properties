quarkus.application.version = 1.1

%prod.kafka.bootstrap.servers = ${KAFKA_BOOTSTRAP_SERVERS}

mp.messaging.outgoing.order-events.connector = smallrye-kafka
%prod.mp.messaging.outgoing.order-events.topic = ${KAFKA_TOPIC}
#mp.messaging.outgoing.order-events.merge = true
mp.messaging.outgoing.order-events.value.serializer = io.quarkus.kafka.client.serialization.ObjectMapperSerializer

quarkus.datasource.db-kind = h2
quarkus.datasource.jdbc.url = jdbc:h2:mem:testdb
quarkus.hibernate-orm.database.generation = drop-and-create
%test.quarkus.hibernate-orm.log.sql = true

quarkus.kubernetes.deployment-target = knative
quarkus.knative.env.vars.kafka-topic = order-events
quarkus.knative.env.vars.kafka-bootstrap-servers = my-cluster-kafka-bootstrap.kafka:9092
quarkus.knative.env.vars.tick-timeout = 10000
quarkus.container-image.group = dev.local

quarkus.kafka.health.enabled = true

%openshift.quarkus.container-image.group = demo-eventing
%openshift.quarkus.container-image.registry = image-registry.openshift-image-registry.svc:5000

%prod.app.orders.timeout = ${TICK_TIMEOUT}

quarkus.http.access-log.enabled = true
quarkus.http.access-log.pattern = long

quarkus.rest-client."pl.piomin.samples.quarkus.serverless.order.client.OrderSender".url = http://localhost:8090
%openshift.quarkus.rest-client."pl.piomin.samples.quarkus.serverless.order.client.OrderSender".url = http://kafka-sink-ingress.knative-eventing.svc.cluster.local/demo-eventing

#quarkus.container-image.registry = quay.io
#quarkus.container-image.build = true
#quarkus.container-image.push = true